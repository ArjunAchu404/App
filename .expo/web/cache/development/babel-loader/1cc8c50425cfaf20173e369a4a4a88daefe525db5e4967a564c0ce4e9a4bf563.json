{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useNavigation } from '@react-navigation/native';\nimport * as Font from 'expo-font';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginScreen = function LoginScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var navigation = useNavigation();\n  useEffect(function () {\n    var loadFonts = function () {\n      var _ref = _asyncToGenerator(function* () {\n        yield Font.loadAsync({\n          'poppins-medium': require(\"./Poppins-Medium.ttf\")\n        });\n      });\n      return function loadFonts() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    loadFonts();\n  }, []);\n  var handleLogin = function handleLogin() {\n    if (username && password) {\n      navigation.reset({\n        index: 0,\n        routes: [{\n          name: 'Home'\n        }]\n      });\n    } else {\n      setError('Invalid username or password');\n    }\n  };\n  var handleNavigateToRegistration = function handleNavigateToRegistration() {\n    navigation.navigate('Register');\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: [styles.title, {\n        fontFamily: 'poppins-medium'\n      }],\n      children: \"Login\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Username\",\n      value: username,\n      onChangeText: setUsername\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      value: password,\n      onChangeText: setPassword\n    }), error ? _jsx(Text, {\n      style: styles.error,\n      children: error\n    }) : null, _jsx(Button, {\n      title: \"Login\",\n      onPress: handleLogin\n    }), _jsx(TouchableOpacity, {\n      onPress: handleNavigateToRegistration,\n      children: _jsx(Text, {\n        style: [styles.newUserButton, {\n          fontFamily: 'poppins-regular'\n        }],\n        children: \"New User? Register Here\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20\n  },\n  input: {\n    height: 40,\n    width: '80%',\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 10,\n    paddingLeft: 10\n  },\n  error: {\n    color: 'red',\n    marginBottom: 10\n  },\n  newUserButton: {\n    fontFamily: 'poppins-regular',\n    color: 'blue',\n    marginTop: 10\n  }\n});\nexport default LoginScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","TextInput","Button","StyleSheet","TouchableOpacity","useNavigation","Font","jsx","_jsx","jsxs","_jsxs","LoginScreen","_useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","_useState5","_useState6","error","setError","navigation","loadFonts","_ref","_asyncToGenerator","loadAsync","require","apply","arguments","handleLogin","reset","index","routes","name","handleNavigateToRegistration","navigate","style","styles","container","children","title","fontFamily","input","placeholder","value","onChangeText","secureTextEntry","onPress","newUserButton","create","flex","justifyContent","alignItems","fontSize","fontWeight","marginBottom","height","width","borderColor","borderWidth","paddingLeft","color","marginTop"],"sources":["C:/Users/encog/Desktop/App/src/LoginScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, TextInput, Button, StyleSheet, TouchableOpacity } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport * as Font from 'expo-font';\r\n\r\nconst LoginScreen = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigation = useNavigation();\r\n\r\n  useEffect(() => {\r\n    // Load the 'Poppins' font\r\n    const loadFonts = async () => {\r\n      await Font.loadAsync({\r\n        'poppins-medium': require('./Poppins-Medium.ttf'), // Adjust the path here\r\n      });\r\n    };\r\n\r\n    loadFonts();\r\n  }, []);\r\n\r\n  const handleLogin = () => {\r\n    // Perform login logic here\r\n    if (username && password) {\r\n      // Successful login, navigate to the Home screen and reset the navigation state\r\n      navigation.reset({\r\n        index: 0,\r\n        routes: [{ name: 'Home' }],\r\n      });\r\n    } else {\r\n      setError('Invalid username or password');\r\n    }\r\n  };\r\n\r\n  const handleNavigateToRegistration = () => {\r\n    // Navigate to the registration screen\r\n    navigation.navigate('Register');\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={[styles.title, { fontFamily: 'poppins-medium' }]}>Login</Text>\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Username\"\r\n        value={username}\r\n        onChangeText={setUsername}\r\n      />\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Password\"\r\n        secureTextEntry\r\n        value={password}\r\n        onChangeText={setPassword}\r\n      />\r\n      {error ? <Text style={styles.error}>{error}</Text> : null}\r\n      <Button title=\"Login\" onPress={handleLogin} />\r\n\r\n      {/* New User? button */}\r\n      <TouchableOpacity onPress={handleNavigateToRegistration}>\r\n        <Text style={[styles.newUserButton, { fontFamily: 'poppins-regular' }]}>\r\n          New User? Register Here\r\n        </Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginBottom: 20,\r\n  },\r\n  input: {\r\n    height: 40,\r\n    width: '80%',\r\n    borderColor: 'gray',\r\n    borderWidth: 1,\r\n    marginBottom: 10,\r\n    paddingLeft: 10,\r\n  },\r\n  error: {\r\n    color: 'red',\r\n    marginBottom: 10,\r\n  },\r\n  newUserButton: {\r\n    fontFamily: 'poppins-regular',\r\n    color: 'blue',\r\n    marginTop: 10,\r\n  },\r\n});\r\n\r\nexport default LoginScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}