{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ThoughtScreen = function ThoughtScreen(_ref) {\n  var navigation = _ref.navigation;\n  var thoughts = ['Thought 1: Your thoughts shape your reality.', 'Thought 2: Embrace the power of positivity.', 'Thought 3: Every day is a new opportunity to change your life.'];\n  var getRandomThought = function getRandomThought() {\n    var randomIndex = Math.floor(Math.random() * thoughts.length);\n    return thoughts[randomIndex];\n  };\n  var getRandomColor = function getRandomColor() {\n    var randomColor = `rgb(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n    return randomColor;\n  };\n  var _useState = useState(getRandomThought()),\n    _useState2 = _slicedToArray(_useState, 2),\n    thought = _useState2[0],\n    setThought = _useState2[1];\n  var _useState3 = useState(getRandomColor()),\n    _useState4 = _slicedToArray(_useState3, 2),\n    backgroundColor = _useState4[0],\n    setBackgroundColor = _useState4[1];\n  useEffect(function () {\n    var onBackPress = function onBackPress() {\n      BackHandler.exitApp();\n      return true;\n    };\n    BackHandler.addEventListener('hardwareBackPress', onBackPress);\n    return function () {\n      BackHandler.removeEventListener('hardwareBackPress', onBackPress);\n    };\n  }, []);\n  var handleSkip = function handleSkip() {\n    navigation.navigate('Login');\n  };\n  var handleRefresh = function handleRefresh() {\n    setThought(getRandomThought());\n    setBackgroundColor(getRandomColor());\n  };\n  return _jsxs(View, {\n    style: [styles.container, {\n      backgroundColor: backgroundColor\n    }],\n    children: [_jsx(Text, {\n      children: thought\n    }), _jsx(Button, {\n      title: \"Skip\",\n      onPress: handleSkip\n    }), _jsx(Button, {\n      title: \"Refresh\",\n      onPress: handleRefresh\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default ThoughtScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","Button","BackHandler","StyleSheet","jsx","_jsx","jsxs","_jsxs","ThoughtScreen","_ref","navigation","thoughts","getRandomThought","randomIndex","Math","floor","random","length","getRandomColor","randomColor","_useState","_useState2","_slicedToArray","thought","setThought","_useState3","_useState4","backgroundColor","setBackgroundColor","onBackPress","exitApp","addEventListener","removeEventListener","handleSkip","navigate","handleRefresh","style","styles","container","children","title","onPress","create","flex","justifyContent","alignItems"],"sources":["C:/Users/shiji/Documents/GitHub/meee/src/ThoughtScreen.js"],"sourcesContent":["// ThoughtScreen.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { View, Text, Button, BackHandler, StyleSheet } from 'react-native';\r\n\r\nconst ThoughtScreen = ({ navigation }) => {\r\n  const thoughts = [\r\n    'Thought 1: Your thoughts shape your reality.',\r\n    'Thought 2: Embrace the power of positivity.',\r\n    'Thought 3: Every day is a new opportunity to change your life.',\r\n    // Add more thoughts as needed\r\n  ];\r\n\r\n  const getRandomThought = () => {\r\n    const randomIndex = Math.floor(Math.random() * thoughts.length);\r\n    return thoughts[randomIndex];\r\n  };\r\n\r\n  const getRandomColor = () => {\r\n    const randomColor = `rgb(${Math.floor(Math.random() * 256)}, ${Math.floor(\r\n      Math.random() * 256\r\n    )}, ${Math.floor(Math.random() * 256)})`;\r\n    return randomColor;\r\n  };\r\n\r\n  const [thought, setThought] = useState(getRandomThought());\r\n  const [backgroundColor, setBackgroundColor] = useState(getRandomColor());\r\n\r\n  useEffect(() => {\r\n    const onBackPress = () => {\r\n      // Close the app when the back button is pressed\r\n      BackHandler.exitApp();\r\n      return true; // Prevent default behavior (closing the app)\r\n    };\r\n\r\n    // Add event listener for the back button press\r\n    BackHandler.addEventListener('hardwareBackPress', onBackPress);\r\n\r\n    // Clean up the event listener when the component is unmounted\r\n    return () => {\r\n      BackHandler.removeEventListener('hardwareBackPress', onBackPress);\r\n    };\r\n  }, []);\r\n\r\n  const handleSkip = () => {\r\n    // Navigate to the next screen after clicking the skip button.\r\n    // Replace 'Login' with the name of your next screen.\r\n    navigation.navigate('Login');\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    // Update the thought and background color when the refresh button is pressed\r\n    setThought(getRandomThought());\r\n    setBackgroundColor(getRandomColor());\r\n  };\r\n\r\n  return (\r\n    <View style={[styles.container, { backgroundColor }]}>\r\n      <Text>{thought}</Text>\r\n      {/* Add your thought content here */}\r\n      <Button title=\"Skip\" onPress={handleSkip} />\r\n      <Button title=\"Refresh\" onPress={handleRefresh} />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nexport default ThoughtScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}