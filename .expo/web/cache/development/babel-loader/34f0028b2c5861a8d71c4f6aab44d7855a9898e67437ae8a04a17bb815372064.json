{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar thoughts = ['Thought 1: Your thoughts shape your reality.', 'Thought 2: Embrace the power of positivity.', 'Thought 3: Every day is a new opportunity.', 'Thought 4: Focus on progress, not perfection.', 'Thought 5: Your attitude determines your direction.'];\nvar getRandomThought = function getRandomThought() {\n  var randomIndex = Math.floor(Math.random() * thoughts.length);\n  return thoughts[randomIndex];\n};\nvar getRandomColor = function getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\nvar ThoughtScreen = function ThoughtScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(getRandomThought()),\n    _useState2 = _slicedToArray(_useState, 2),\n    thought = _useState2[0],\n    setThought = _useState2[1];\n  var _useState3 = useState(getRandomColor()),\n    _useState4 = _slicedToArray(_useState3, 2),\n    backgroundColor = _useState4[0],\n    setBackgroundColor = _useState4[1];\n  useEffect(function () {\n    var onBackPress = function onBackPress() {\n      BackHandler.exitApp();\n      return true;\n    };\n    BackHandler.addEventListener('hardwareBackPress', onBackPress);\n    return function () {\n      BackHandler.removeEventListener('hardwareBackPress', onBackPress);\n    };\n  }, []);\n  var handleSkip = function handleSkip() {\n    setThought(getRandomThought());\n    setBackgroundColor(getRandomColor());\n  };\n  return _jsxs(View, {\n    style: [styles.container, {\n      backgroundColor: backgroundColor\n    }],\n    children: [_jsx(Text, {\n      children: thought\n    }), _jsx(Button, {\n      title: \"Skip\",\n      onPress: handleSkip\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default ThoughtScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","Button","BackHandler","StyleSheet","jsx","_jsx","jsxs","_jsxs","thoughts","getRandomThought","randomIndex","Math","floor","random","length","getRandomColor","letters","color","i","ThoughtScreen","_ref","navigation","_useState","_useState2","_slicedToArray","thought","setThought","_useState3","_useState4","backgroundColor","setBackgroundColor","onBackPress","exitApp","addEventListener","removeEventListener","handleSkip","style","styles","container","children","title","onPress","create","flex","justifyContent","alignItems"],"sources":["C:/Users/shiji/Documents/GitHub/meee/src/ThoughtScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, Button, BackHandler, StyleSheet } from 'react-native';\r\n\r\nconst thoughts = [\r\n  'Thought 1: Your thoughts shape your reality.',\r\n  'Thought 2: Embrace the power of positivity.',\r\n  'Thought 3: Every day is a new opportunity.',\r\n  'Thought 4: Focus on progress, not perfection.',\r\n  'Thought 5: Your attitude determines your direction.',\r\n];\r\n\r\nconst getRandomThought = () => {\r\n  const randomIndex = Math.floor(Math.random() * thoughts.length);\r\n  return thoughts[randomIndex];\r\n};\r\n\r\nconst getRandomColor = () => {\r\n  const letters = '0123456789ABCDEF';\r\n  let color = '#';\r\n  for (let i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n};\r\n\r\nconst ThoughtScreen = ({ navigation }) => {\r\n  const [thought, setThought] = useState(getRandomThought());\r\n  const [backgroundColor, setBackgroundColor] = useState(getRandomColor());\r\n\r\n  useEffect(() => {\r\n    const onBackPress = () => {\r\n      BackHandler.exitApp();\r\n      return true;\r\n    };\r\n\r\n    BackHandler.addEventListener('hardwareBackPress', onBackPress);\r\n\r\n    return () => {\r\n      BackHandler.removeEventListener('hardwareBackPress', onBackPress);\r\n    };\r\n  }, []);\r\n\r\n  const handleSkip = () => {\r\n    setThought(getRandomThought());\r\n    setBackgroundColor(getRandomColor());\r\n  };\r\n\r\n  return (\r\n    <View style={[styles.container, { backgroundColor }]}>\r\n      <Text>{thought}</Text>\r\n      <Button title=\"Skip\" onPress={handleSkip} />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nexport default ThoughtScreen;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,WAAA;AAAA,OAAAC,UAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGnD,IAAMC,QAAQ,GAAG,CACf,8CAA8C,EAC9C,6CAA6C,EAC7C,4CAA4C,EAC5C,+CAA+C,EAC/C,qDAAqD,CACtD;AAED,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA,EAAS;EAC7B,IAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,QAAQ,CAACM,MAAM,CAAC;EAC/D,OAAON,QAAQ,CAACE,WAAW,CAAC;AAC9B,CAAC;AAED,IAAMK,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;EAC3B,IAAMC,OAAO,GAAG,kBAAkB;EAClC,IAAIC,KAAK,GAAG,GAAG;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,KAAK,IAAID,OAAO,CAACL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;EAClD;EACA,OAAOI,KAAK;AACd,CAAC;AAED,IAAME,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAAuB;EAAA,IAAjBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EACjC,IAAAC,SAAA,GAA8BxB,QAAQ,CAACW,gBAAgB,CAAC,CAAC,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAnDG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAC1B,IAAAI,UAAA,GAA8C7B,QAAQ,CAACiB,cAAc,CAAC,CAAC,CAAC;IAAAa,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjEE,eAAe,GAAAD,UAAA;IAAEE,kBAAkB,GAAAF,UAAA;EAE1C/B,SAAS,CAAC,YAAM;IACd,IAAMkC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;MACxB7B,WAAW,CAAC8B,OAAO,CAAC,CAAC;MACrB,OAAO,IAAI;IACb,CAAC;IAED9B,WAAW,CAAC+B,gBAAgB,CAAC,mBAAmB,EAAEF,WAAW,CAAC;IAE9D,OAAO,YAAM;MACX7B,WAAW,CAACgC,mBAAmB,CAAC,mBAAmB,EAAEH,WAAW,CAAC;IACnE,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMI,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACvBT,UAAU,CAACjB,gBAAgB,CAAC,CAAC,CAAC;IAC9BqB,kBAAkB,CAACf,cAAc,CAAC,CAAC,CAAC;EACtC,CAAC;EAED,OACER,KAAA,CAACR,IAAI;IAACqC,KAAK,EAAE,CAACC,MAAM,CAACC,SAAS,EAAE;MAAET,eAAe,EAAfA;IAAgB,CAAC,CAAE;IAAAU,QAAA,GACnDlC,IAAA,CAACL,IAAI;MAAAuC,QAAA,EAAEd;IAAO,CAAO,CAAC,EACtBpB,IAAA,CAACJ,MAAM;MAACuC,KAAK,EAAC,MAAM;MAACC,OAAO,EAAEN;IAAW,CAAE,CAAC;EAAA,CACxC,CAAC;AAEX,CAAC;AAED,IAAME,MAAM,GAAGlC,UAAU,CAACuC,MAAM,CAAC;EAC/BJ,SAAS,EAAE;IACTK,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,eAAe1B,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}