{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ThoughtScreen = function ThoughtScreen(_ref) {\n  var navigation = _ref.navigation;\n  var thoughts = [];\n  var getRandomThought = function getRandomThought() {\n    var randomIndex = Math.floor(Math.random() * thoughts.length);\n    return thoughts[randomIndex];\n  };\n  var getRandomColor = function getRandomColor() {\n    var randomColor = `rgb(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)})`;\n    return randomColor;\n  };\n  var _useState = useState(getRandomThought()),\n    _useState2 = _slicedToArray(_useState, 2),\n    thought = _useState2[0],\n    setThought = _useState2[1];\n  var _useState3 = useState(getRandomColor()),\n    _useState4 = _slicedToArray(_useState3, 2),\n    backgroundColor = _useState4[0],\n    setBackgroundColor = _useState4[1];\n  useEffect(function () {\n    var onBackPress = function onBackPress() {\n      BackHandler.exitApp();\n      return true;\n    };\n    BackHandler.addEventListener('hardwareBackPress', onBackPress);\n    return function () {\n      BackHandler.removeEventListener('hardwareBackPress', onBackPress);\n    };\n  }, []);\n  var handleSkip = function handleSkip() {\n    navigation.navigate('Login');\n  };\n  var handleRefresh = function handleRefresh() {\n    setThought(getRandomThought());\n    setBackgroundColor(getRandomColor());\n  };\n  return _jsxs(ScrollView, {\n    contentContainerStyle: [styles.container, {\n      backgroundColor: backgroundColor\n    }],\n    children: [_jsx(View, {\n      children: _jsx(Text, {\n        style: styles.thoughtText,\n        children: thought\n      })\n    }), _jsxs(View, {\n      style: styles.bottomButtons,\n      children: [_jsx(Button, {\n        title: \"Skip\",\n        onPress: handleSkip\n      }), _jsx(Button, {\n        title: \"Refresh\",\n        onPress: handleRefresh\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20\n  },\n  thoughtText: {\n    fontSize: 18,\n    textAlign: 'center',\n    marginBottom: 20,\n    color: 'white'\n  },\n  bottomButtons: {\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  }\n});\nexport default ThoughtScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","Button","BackHandler","StyleSheet","ScrollView","jsx","_jsx","jsxs","_jsxs","ThoughtScreen","_ref","navigation","thoughts","getRandomThought","randomIndex","Math","floor","random","length","getRandomColor","randomColor","_useState","_useState2","_slicedToArray","thought","setThought","_useState3","_useState4","backgroundColor","setBackgroundColor","onBackPress","exitApp","addEventListener","removeEventListener","handleSkip","navigate","handleRefresh","contentContainerStyle","styles","container","children","style","thoughtText","bottomButtons","title","onPress","create","flex","justifyContent","alignItems","padding","fontSize","textAlign","marginBottom","color","width","flexDirection"],"sources":["C:/Users/shiji/Documents/GitHub/meee/src/ThoughtScreen.js"],"sourcesContent":["// ThoughtScreen.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { View, Text, Button, BackHandler, StyleSheet, ScrollView } from 'react-native';\r\n\r\nconst ThoughtScreen = ({ navigation }) => {\r\n  const thoughts = [\r\n    // ... (unchanged)\r\n  ];\r\n\r\n  const getRandomThought = () => {\r\n    const randomIndex = Math.floor(Math.random() * thoughts.length);\r\n    return thoughts[randomIndex];\r\n  };\r\n\r\n  const getRandomColor = () => {\r\n    const randomColor = `rgb(${Math.floor(Math.random() * 256)}, ${Math.floor(\r\n      Math.random() * 256\r\n    )}, ${Math.floor(Math.random() * 256)})`;\r\n    return randomColor;\r\n  };\r\n\r\n  const [thought, setThought] = useState(getRandomThought());\r\n  const [backgroundColor, setBackgroundColor] = useState(getRandomColor());\r\n\r\n  useEffect(() => {\r\n    const onBackPress = () => {\r\n      BackHandler.exitApp();\r\n      return true;\r\n    };\r\n\r\n    BackHandler.addEventListener('hardwareBackPress', onBackPress);\r\n\r\n    return () => {\r\n      BackHandler.removeEventListener('hardwareBackPress', onBackPress);\r\n    };\r\n  }, []);\r\n\r\n  const handleSkip = () => {\r\n    navigation.navigate('Login');\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    setThought(getRandomThought());\r\n    setBackgroundColor(getRandomColor());\r\n  };\r\n\r\n  return (\r\n    <ScrollView contentContainerStyle={[styles.container, { backgroundColor }]}>\r\n      <View>\r\n        <Text style={styles.thoughtText}>{thought}</Text>\r\n      </View>\r\n      <View style={styles.bottomButtons}>\r\n        <Button title=\"Skip\" onPress={handleSkip} />\r\n        <Button title=\"Refresh\" onPress={handleRefresh} />\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n  },\r\n  thoughtText: {\r\n    fontSize: 18,\r\n    textAlign: 'center',\r\n    marginBottom: 20,\r\n    color: 'white',\r\n  },\r\n  bottomButtons: {\r\n    width: '100%',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n  },\r\n});\r\n\r\nexport default ThoughtScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}